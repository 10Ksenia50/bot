import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7640887728:AAF4-NQ14ufDYPJRon-6VZaW_s9mqseemko"

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üíô –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"))
keyboard.add(KeyboardButton("üßò –î–∏—Ö–∞–ª—å–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞"), KeyboardButton("üìñ –ö–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏"))

# –û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:", reply_markup=keyboard)

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "üíô –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def support_handler(message: types.Message):
    await message.answer("–Ø —Ç—É—Ç, —â–æ–± —Ç–µ–±–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏! –ù–∞–ø–∏—à–∏, —â–æ —Ç–µ–±–µ —Ç—É—Ä–±—É—î.")

@dp.message_handler(lambda message: message.text == "üßò –î–∏—Ö–∞–ª—å–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")
async def breathing_handler(message: types.Message):
    await message.answer("–°–ø—Ä–æ–±—É–π —Ü—é –ø—Ä–æ—Å—Ç—É —Ç–µ—Ö–Ω—ñ–∫—É:\n1Ô∏è‚É£ –í–¥–∏—Ö–∞–π –Ω–∞ 4 —Å–µ–∫—É–Ω–¥–∏\n2Ô∏è‚É£ –ó–∞—Ç—Ä–∏–º–∞–π –¥–∏—Ö–∞–Ω–Ω—è –Ω–∞ 4 —Å–µ–∫—É–Ω–¥–∏\n3Ô∏è‚É£ –í–∏–¥–∏—Ö–∞–π –Ω–∞ 4 —Å–µ–∫—É–Ω–¥–∏\n4Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏ 5 —Ä–∞–∑—ñ–≤.")

@dp.message_handler(lambda message: message.text == "üìñ –ö–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏")
async def materials_handler(message: types.Message):
    await message.answer("–û—Å—å –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π:\nüìå –Ø–∫ –±–æ—Ä–æ—Ç–∏—Å—è –∑—ñ —Å—Ç—Ä–µ—Å–æ–º: [–ø–æ—Å–∏–ª–∞–Ω–Ω—è]\nüìå –ú–µ—Ç–æ–¥–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó: [–ø–æ—Å–∏–ª–∞–Ω–Ω—è]")

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler()
async def echo_handler(message: types.Message):
    response = get_psychological_response(message.text)
    await message.answer(response)

def get_psychological_response(text):
    """–ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    keywords = {
        "—Å—Ç—Ä–µ—Å": "–°–ø—Ä–æ–±—É–π –∑—Ä–æ–±–∏—Ç–∏ –≥–ª–∏–±–æ–∫–∏–π –≤–¥–∏—Ö —ñ –≤–∏–¥–∏—Ö. –î–∏—Ö–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–Ω–∏–∑–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É.",
        "—Ç—Ä–∏–≤–æ–≥–∞": "–¢—Ä–∏–≤–æ–≥–∞ ‚Äì —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π –∑–æ—Å–µ—Ä–µ–¥–∏—Ç–∏—Å—è –Ω–∞ —Ç–µ–ø–µ—Ä—ñ—à–Ω—å–æ–º—É –º–æ–º–µ–Ω—Ç—ñ.",
        "–¥–µ–ø—Ä–µ—Å—ñ—è": "–¢–∏ –Ω–µ –æ–¥–∏–Ω. –Ø–∫—â–æ —Ç–æ–±—ñ –¥—É–∂–µ –≤–∞–∂–∫–æ, –º–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞.",
        "—Å–∞–º–æ—Ç–Ω—ñ—Å—Ç—å": "–¢–∏ –≤–∞–∂–ª–∏–≤–∏–π! –ü–æ–≥–æ–≤–æ—Ä–∏ –∑ –¥—Ä—É–∑—è–º–∏ —á–∏ —Å—ñ–º‚Äô—î—é, —Ü–µ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏."
    }
    
    for word, response in keywords.items():
        if word in text.lower():
            return response
    return "–Ø —Ç—É—Ç, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–±–µ. –ù–∞–ø–∏—à–∏, —â–æ —Ç–µ–±–µ —Ç—É—Ä–±—É—î üíô"



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
